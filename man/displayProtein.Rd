% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/graphics.R
\name{displayProtein}
\alias{displayProtein}
\title{displayProtein}
\usage{
displayProtein(
  proteinData,
  columns = NA,
  emptySequence = "",
  replaceNA = NA,
  backGroundColor = "white",
  frontColor = "black",
  borderColor = backGroundColor,
  defaultTextColor = "black",
  textColorColumn = NA,
  replaceTextNA = "0",
  textColorLevels = NA,
  textColorLabels = NA,
  textColors = c("black"),
  textColorFunction = NA,
  showTextLegend = F,
  textLegendTitle = textColorColumn,
  textLegendDirection = "vertical",
  fillColorColumn = NA,
  replaceFillNA = NA,
  fillColorLevels = NA,
  fillColorLabels = NA,
  fillColors = backGroundColor,
  fillTransformation = NA,
  fillColorsMinMax = NA,
  fillFunction = NA,
  showFillLegend = T,
  fillLegendTitle = fillColorColumn,
  fillLegendDirection = "horizontal",
  legendPosition = "bottom",
  legendBox = "vertical",
  naFillColor = backGroundColor,
  textSize = 4,
  textFontFace = "bold",
  linewidth = 0.35,
  alpha = 1,
  tileWidth = 1,
  tileHeight = 1,
  title = ggplot2::waiver(),
  subtitle = ggplot2::waiver(),
  caption = ggplot2::waiver()
)
}
\arguments{
\item{proteinData}{the protein data data.frame}

\item{columns}{numeric vector that specifies the width (in characters) of the protein data display}

\item{emptySequence}{if the protein data is extended, this character vector is used to put in the sequence column in the new rows. The position column is simply
filled with increasing integers.}

\item{replaceNA}{default is NA, if defined as something else, then ALL NA values in the protein data will be replace with this argument.
Ignored if columns is not NA.}

\item{backGroundColor}{background color to use for the 'tiles' if no fill parameters are set. Default is 'white'}

\item{frontColor}{color to use to border the 'tiles' in the fill color legend. If no text color parameters are set Default = 'black'}

\item{borderColor}{color to use for the 'tiles'. Default is 'backGroundColor'}

\item{defaultTextColor}{color to use for the text in the 'tiles' if no text color parameters are set Default = 'black'}

\item{textColorColumn}{character vector: name of the column in the proteinData data.frame that contains info for the color of the text
in the 'tiles'. Note: this should not be continuous data}

\item{replaceTextNA}{vector that specifies with what to replace NA if there are NA values in the textColorColumn in the protein data. Default is "0" (for coverage purposes)}

\item{textColorLevels}{if the data in textColor column is non-continous, eg character data, then this argument allows definition/ordering of the levels during
the 'transformation' into factors (done) during visualization of the text colors}

\item{textColorLabels}{if the data in textColor Column is non-continous, eg character data, then this argument allows definition/ordering of the names of the levels
during the 'transformation' into factors (done) during visualization of the text colors. See also \code{\link[base]{factor}}}

\item{textColors}{vector with the text colors to use. Note: the number required is defined by the number of 'discrete' values in the textColor
column of the protein data}

\item{textColorFunction}{allows custom definition of the function scale_color_ - function to be used during display, see example on 'fillFunction' argument}

\item{showTextLegend}{logical vector, if TRUE show the legend for the text color(s)}

\item{textLegendTitle}{title to use for the legend of the text colors}

\item{textLegendDirection}{direction text color legend. Default is 'vertical'. Alternative is 'horizontal'}

\item{fillColorColumn}{character vector: name of the column in the proteinData data.frame that contains info for the fillcolor
of the 'tiles'. Note: this should be continuous data. If discrete data, then fillColorLevels can be defined for more exact coloring}

\item{replaceFillNA}{vector that specifies with what to replace NA if there are NA values in the fillColorColumn in the protein data}

\item{fillColorLevels}{if the data in fillColor column is non-continous, eg character data, then this argument allows definition/ordering of the names of the levels
during the 'transformation' into factors (done) during visualization of the text colors. See also \code{\link[base]{factor}}}

\item{fillColorLabels}{vector with the text colors to use. Note: the number required is defined by the number of 'discrete' values in the fillColor
column of the protein data}

\item{fillColors}{the lower (minimum) and upper (maximum) bound colors to use for fillcolor of the tiles. Usually this is just two different colors:
the 'tiles' will be filled with a mixture of both depending on the values in the textColorColumn}

\item{fillTransformation}{this allows the scale of the fill colors to be non-linear. Default is NA. One frequently used is 'log10' to generate
a logarithmic scale. Other options can be found in \code{\link[ggplot2]{scale_fill_gradientn}}}

\item{fillColorsMinMax}{the minimum and maximum value to use for forming gradient colors for the tiles. If some values in the textColorColumn are
outside the range c(minimum, maximum), the some unexpected things may happen. Usually this is used to 'stretch' the color scale. Only works when
working with a continuous scake}

\item{fillFunction}{allows for precise setting of the fill scale, see examples}

\item{showFillLegend}{logical vector, if TRUE show the legend for the fill color(s)}

\item{fillLegendTitle}{title to use for the legend of the text colors}

\item{fillLegendDirection}{direction fill color legend. Default is 'horizontal'. Alternative is 'vertical'}

\item{legendPosition}{character vector: where to put the legends ("none", "left", "right", "bottom", "top"). Default is 'bottom'}

\item{legendBox}{arrangement of multiple legends ("horizontal" or "vertical")}

\item{naFillColor}{still used ????????????? <------------}

\item{textSize}{default is 4. Sets the size of the text in the 'tiles'}

\item{textFontFace}{allows manipulation of the text font used. Default is 'bold'. Alternatives are "plain", "italic", & "bold.italic"}

\item{linewidth}{sets the width of the lines between the 'tiles', default is 0.35}

\item{alpha}{sets the alpha for the fill color of the 'tiles'. Default is 1}

\item{tileWidth}{sets the width for the 'tiles', default is 1}

\item{tileHeight}{sets the height for the 'tiles', default is 1}

\item{title}{specifies the title}

\item{subtitle}{specifies the subtitle}

\item{caption}{specifies the caption}
}
\value{
a ggplot object
}
\description{
displays the protein data in a data frame via ggplot2's geom_tile
}
\examples{
newTable <- proteinCoverage(sequence = standardProtein("OVA"), start = 2,
 nterm = 1, peptideTable = OVATable("peptide"), Accession = "P01012",
  positionColumn = "PositionsinProteins")
newTable <- mapPeptidesToProtein(proteinDF = newTable,
 peptideTable = OVATable("peptide"), Accession = "P01012",
 positionColumn = "PositionsinProteins", variable = "Abundances_1",
 dataName = "Abundances_1")
newTable <- mapPeptidesToProtein(proteinDF = newTable,
 peptideTable = OVATable("peptide"), Accession = "P01012",
 positionColumn = "PositionsinProteins",
 variable = "Abundances_2", dataName = "Abundances_2")
newTable <- mapPeptidesToProtein(proteinDF = newTable,
 peptideTable = OVATable("peptide"), Accession = "P01012",
 positionColumn = "PositionsinProteins",
 variable = "XCorrbySearchEngine_1", dataName = "Score")
newTable[35:40,]
# display protein sequence info
displayProtein(newTable, columns = 50)
displayProtein(newTable, columns = 50, textColorColumn = "sequence",
 textColors = rainbow(21))
displayProtein(newTable, columns = 50, textColorColumn = "sequence",
 textColors = terrain.colors(21))
# simply display sequencing coverage
displayProtein(newTable, columns = 50, textColorColumn = "coverage",
 textColors = c("black","red"))
displayProtein(boxData(newTable, ncols = 50), textColorColumn = "coverage",
 textColors = c("black","red"))
displayProtein(newTable, columns = 50, textColorColumn = "coverage",
 textColors = c("black","red"), backGroundColor = "lightblue")
displayProtein(newTable, columns = 50, textColorColumn = "coverage",
 textColors = c("black","red"), textLegendTitle = "Coverage",
 showTextLegend = TRUE, textColorLabels = c("No Coverage", "Coverage"), title = "Ovalbumin")
# display score & coverage
displayProtein(newTable, columns = 50, textColorColumn = "coverage",
 textColors = c("black","red"), textLegendTitle = "Coverage", showTextLegend = TRUE,
 textColorLabels = c("No Coverage", "Coverage"), title = "Ovalbumin",
 fillColorColumn = "Score", fillColors = c("white","brown"), alpha = 0.5)
displayProtein(newTable, columns = 50, textColorColumn = "coverage",
 textColors = c("black","red"), textLegendTitle = "Coverage", showTextLegend = TRUE,
 textColorLabels = c("No Coverage", "Coverage"), title = "Ovalbumin", fillColorColumn = "Score",
 fillColors = c("white","brown"), alpha = 0.5, fillColorsMinMax = c(0,50))
# display abundance & coverage
displayProtein(newTable, columns = 50, textColorColumn = "coverage",
 textColors = c("black","red"), title = "Ovalbumin", fillColorColumn = "Abundances_1",
 fillColors = c("white","brown"), alpha = 0.5)
displayProtein(newTable, columns = 50, textColorColumn = "coverage",
 textColors = c("black","red"), title = "Ovalbumin", fillColorColumn = "Abundances_1",
 fillColors = c("white","brown"), alpha = 0.5, fillColorsMinMax = c(1E3, 1.5E10))
displayProtein(newTable, columns = 50, textColorColumn = "coverage",
 textColors = c("black","red"), title = "Ovalbumin", fillColorColumn = "Abundances_2",
 fillColors = c("white","brown"), alpha = 0.5, fillColorsMinMax = c(1E3, 1.5E10))
# display abundance logarithmic color scale & coverage
displayProtein(newTable, columns = 50, textColorColumn = "coverage",
 textColors = c("black","red"), title = "Ovalbumin", fillColorColumn = "Abundances_1",
 fillColors = c("white","#8b0000"), alpha = 0.5, fillColorsMinMax = c(1E6, 1.5E10),
 fillTransformation = "log10")
displayProtein(newTable, columns = 50, textColorColumn = "coverage",
 textColors = c("black","red"), title = "Ovalbumin", fillColorColumn = "Abundances_2",
 fillColors = c("white","#8b0000"), alpha = 0.5, fillColorsMinMax = c(1E6, 1E11),
 fillTransformation = "log10")
displayProtein(newTable, columns = 50, textColorColumn = "coverage",
 textColors = c("black","red"), title = "Ovalbumin", fillColorColumn = "Abundances_1",
 fillColors = c("white","#8b0000"), alpha = 0.5, fillColorsMinMax = c(1E6, 1.5E10),
 fillTransformation = "log10", fillLegendTitle = "Abundance", fillLegendDirection = "vertical",
 legendPosition = "right")
# use discrete data for fill can be done via 'fillFunction' argument
trypticSites <- getPeptideStart(proteinSequence = standardProtein("OVA"),
 peptideSequence = "(?<!P)R|(?<!P)K")
trypticSites <- data.frame(position = trypticSites, data = "tryptic")
trypticSites
newTable <- addDataToProtein(proteinDF = newTable, dataframe = trypticSites,
dataColumn = "data", dataName = "trypticSite", NAValue = "")
newTable[75:90,]
# w/o using the fillFunction argument
displayProtein(newTable, columns = 50, textColorColumn = "coverage",
 textColors = c("black","red"), textLegendTitle = "Coverage", showTextLegend = TRUE,
 textColorLabels = c("No Coverage", "Coverage"), title = "Ovalbumin - tryptic sites",
 fillColorColumn = "trypticSite", fillColors = c("white","yellow"), replaceFillNA = "",
 fillColorLevels = c("","tryptic"), fillColorLabels = c("Non-tryptic site", "Tryptic site"),
 showFillLegend = FALSE, borderColor = "black")
# using the fillFunction argument
displayProtein(newTable, columns = 50, textColorColumn = "coverage",
textColors = c("black","red"), textLegendTitle = "Coverage", showTextLegend = TRUE,
textColorLabels = c("No Coverage", "Coverage"), title = "Ovalbumin - tryptic sites",
fillColorColumn = "trypticSite", fillFunction = ggplot2::scale_fill_manual(values = c("white",
"yellow"), na.value = "white"), showFillLegend = FALSE, borderColor = "black")
}
