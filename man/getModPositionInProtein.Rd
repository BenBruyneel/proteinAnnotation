% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/modifications.R
\name{getModPositionInProtein}
\alias{getModPositionInProtein}
\title{getModPositionInProtein}
\usage{
getModPositionInProtein(
  peptideTableRow,
  Accession,
  exact = TRUE,
  whichModification,
  positionColumn,
  clearPosition = 1L,
  unclearPosition = 2L
)
}
\arguments{
\item{peptideTableRow}{single row of a data.frame with a 'position column' and 'translated' modification (see examples)}

\item{Accession}{character vector that specifies from which protein Accession to get the position}

\item{exact}{logical vector which defines how the Accession argument is compared to the string argument.
Default is TRUE which means that the Accession needs to be exactly the same letters/numbers. If FALSE then
a 'grepl' statement is used with the Accession as a pattern}

\item{whichModification}{character vector that specifies for which modification the protein position is calculated (if present, name needs to be exact)}

\item{positionColumn}{character vector which specifies which column contains the peptide position information. Proteome Discoverer uses either
'PositionsinProteins' or 'PositionsinMasterProteins' (depending on the settings used in the consensus method)}

\item{clearPosition}{vector (default is 1L) that is used for the clear column when the position of the modification in the peptide is unambiguous (certain)}

\item{unclearPosition}{vector (default is 2L) that is used when a modification position is ambiguous (uncertain)}
}
\value{
data.frame with two columns: 'position' (position of modification in protein) and 'clear' which details if a modification position is ambiguous
}
\description{
takes a row of a data.frame with peptide information (like a peptide table from Proteome Discoverer) with added modification info
(like coming from \code{\link{modPositionsToDF}}) and gives the position of a specified modification (if present)
}
\examples{
OVATable("peptide")$Modifications
# generate data.frame of all these modifications
theModifications <- purrr::map_df(OVATable("peptide")$Modifications, ~modPositions(.x,
 returnEmptyRow = FALSE) |> modPositionsToDF(returnEmptyRow = FALSE))
theModifications |> head()
# bind together the modifications woth the original table
newTable <- dplyr::bind_cols(OVATable("peptide"), theModifications)
newTable |> head()

newTable[15,]
getModPositionInProtein(peptideTableRow = newTable[15,], Accession = "P01012",
 whichModification = "Oxidation", positionColumn = "PositionsinProteins")
newTable[32,]
getModPositionInProtein(peptideTableRow = newTable[32,], Accession = "P01012",
 whichModification = "Phospho", positionColumn = "PositionsinProteins")
getModPositionInProtein(peptideTableRow = newTable[32,], Accession = "P01012",
 whichModification = "Carbamidomethyl", positionColumn = "PositionsinProteins")
getModPositionInProtein(peptideTableRow = newTable[32,], Accession = "P01012",
 whichModification = "Carbamido", positionColumn = "PositionsinProteins")
newTable[1,]
getModPositionInProtein(peptideTableRow = newTable[1,], Accession = "P01012",
 whichModification = "Carbamidomethyl", positionColumn = "PositionsinProteins")
newTable[26,]
# # of possible positions for the phospho modification
stringr::str_count(newTable$Sequence[26], pattern = "S|T")
getModPositionInProtein(peptideTableRow = newTable[26,], Accession = "P01012",
 whichModification = "Phospho", positionColumn = "PositionsinProteins")
getModPositionInProtein(peptideTableRow = newTable[26,], Accession = "P01012",
 whichModification = "Carbamidomethyl", positionColumn = "PositionsinProteins")
# to get all Phospho positions in the protein
purrr::map_df(1:nrow(newTable), ~getModPositionInProtein(newTable[.x,], Accession = "P01012",
 whichModification = "Phospho", positionColumn = "PositionsinProteins")) |>
 dplyr::distinct(position, clear) |> dplyr::arrange(position)
}
