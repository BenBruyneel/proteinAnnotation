% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/protein3d.R
\name{translateToFixedColors}
\alias{translateToFixedColors}
\title{translateToFixedColors}
\usage{
translateToFixedColors(translateDF, notPresentColor)
}
\arguments{
\item{translateDF}{data.frame with two columns: one has the different data elements that need to
be translated to a certain color. The second column should be named 'color' and should contain
the colors to which the values in the first column are translated.
Examples: data.frame(position = 1:10, color = c("blue","red")) or
data.frame(residue = c("C", "A", "P"), color = c("yellow", "red", "blue"))}

\item{notPresentColor}{color(code) for when a value is not in the translation data.frame}
}
\value{
function that takes the argument 'value', which it then translates the argument to
its corresponding color(code)s. The function is vectorized so the argument can be multi-element
}
\description{
function factory that generates a function that 'tramslates' (maps) protein data
to colors. Meant for non-continous data. If the colors are then used as a columnn for the
protein data data.frame, it can be used modify colors on a 3d protein object. See
\code{\link{addStyleElement}} for more info'
}
\examples{
# create protein data
ovaProtein <- proteinCoverage(sequence = standardProtein(),
 peptideTable = OVATable("peptide"), Accession = "P01012",
 positionColumn = "PositionsinProteins", shiftPosition = 1)
# add tryptic sites
ovaProtein <- addDataToProtein(proteinDF = ovaProtein,
 dataframe = data.frame(position = getPeptideStart(proteinSequence = standardProtein(),
 peptideSequence = "(?<!P)R|(?<!P)K"), data = "tryptic"), dataColumn = "data",
 dataName = "realTrypticSite", NAValue = "non tryptic")
# add colors for the tryptic sites
ovaProtein$trypticColor <- translateToFixedColors(translateDF =
 data.frame(position = c("tryptic"), color = "red"),
 notPresentColor = "white")(ovaProtein$realTrypticSite)
# add colors for proline positions
ovaProtein$proline <- translateToFixedColors(translateDF = data.frame(sequence = "P",
 color = "red"), notPresentColor = "white")(ovaProtein$sequence)
ovaProtein |> dplyr::slice(15:20)
}
